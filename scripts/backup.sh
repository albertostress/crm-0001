#!/bin/bash

# EspoCRM Backup Script for Dokploy Deployment
# This script creates backups of database and files
# Usage: ./backup.sh [backup_dir]

set -e

# Configuration
BACKUP_DIR="${1:-/backup}"
RETENTION_DAYS="${BACKUP_RETENTION_DAYS:-7}"
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
BACKUP_NAME="espocrm_backup_${TIMESTAMP}"

# Database configuration from environment
DB_HOST="${DB_HOST:-database}"
DB_PORT="${DB_PORT:-3306}"
DB_NAME="${DB_NAME:-espocrm}"
DB_USER="${DB_USER:-espocrm}"
DB_PASSWORD="${DB_PASSWORD}"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Functions
log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

check_requirements() {
    log_info "Checking requirements..."
    
    # Check if mysqldump is available
    if ! command -v mysqldump &> /dev/null; then
        log_error "mysqldump is not installed"
        exit 1
    fi
    
    # Check if tar is available
    if ! command -v tar &> /dev/null; then
        log_error "tar is not installed"
        exit 1
    fi
    
    # Check if backup directory exists
    if [ ! -d "$BACKUP_DIR" ]; then
        log_info "Creating backup directory: $BACKUP_DIR"
        mkdir -p "$BACKUP_DIR"
    fi
    
    # Check disk space
    AVAILABLE_SPACE=$(df "$BACKUP_DIR" | awk 'NR==2 {print $4}')
    REQUIRED_SPACE=1048576  # 1GB in KB
    
    if [ "$AVAILABLE_SPACE" -lt "$REQUIRED_SPACE" ]; then
        log_error "Insufficient disk space. Available: ${AVAILABLE_SPACE}KB, Required: ${REQUIRED_SPACE}KB"
        exit 1
    fi
    
    log_info "All requirements met"
}

backup_database() {
    log_info "Starting database backup..."
    
    local db_backup_file="${BACKUP_DIR}/${BACKUP_NAME}_database.sql.gz"
    
    # Check database connection
    if ! mysqladmin ping -h"$DB_HOST" -P"$DB_PORT" -u"$DB_USER" -p"$DB_PASSWORD" --silent; then
        log_error "Cannot connect to database"
        return 1
    fi
    
    # Perform database backup
    if mysqldump \
        --host="$DB_HOST" \
        --port="$DB_PORT" \
        --user="$DB_USER" \
        --password="$DB_PASSWORD" \
        --single-transaction \
        --routines \
        --triggers \
        --events \
        --add-drop-table \
        --extended-insert \
        --no-tablespaces \
        "$DB_NAME" | gzip -9 > "$db_backup_file"; then
        
        local size=$(du -h "$db_backup_file" | cut -f1)
        log_info "Database backup completed: $db_backup_file (Size: $size)"
        return 0
    else
        log_error "Database backup failed"
        return 1
    fi
}

backup_files() {
    log_info "Starting file backup..."
    
    local file_backup="${BACKUP_DIR}/${BACKUP_NAME}_files.tar.gz"
    
    # Define directories to backup
    local dirs_to_backup=(
        "/var/www/html/data"
        "/var/www/html/custom"
        "/var/www/html/client/custom"
        "/var/www/html/upload"
    )
    
    # Check if directories exist
    local existing_dirs=()
    for dir in "${dirs_to_backup[@]}"; do
        if [ -d "$dir" ]; then
            existing_dirs+=("$dir")
        else
            log_warning "Directory not found: $dir"
        fi
    done
    
    if [ ${#existing_dirs[@]} -eq 0 ]; then
        log_warning "No directories to backup"
        return 0
    fi
    
    # Create tar archive
    if tar -czf "$file_backup" \
        --exclude='*.log' \
        --exclude='cache/*' \
        --exclude='tmp/*' \
        "${existing_dirs[@]}" 2>/dev/null; then
        
        local size=$(du -h "$file_backup" | cut -f1)
        log_info "File backup completed: $file_backup (Size: $size)"
        return 0
    else
        log_error "File backup failed"
        return 1
    fi
}

create_backup_manifest() {
    log_info "Creating backup manifest..."
    
    local manifest_file="${BACKUP_DIR}/${BACKUP_NAME}_manifest.txt"
    
    cat > "$manifest_file" <<EOF
EspoCRM Backup Manifest
========================
Timestamp: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
Backup Name: ${BACKUP_NAME}
Host: $(hostname)
Database: ${DB_NAME}
Database Host: ${DB_HOST}

Files Included:
- Database backup: ${BACKUP_NAME}_database.sql.gz
- Files backup: ${BACKUP_NAME}_files.tar.gz

Directories Backed Up:
- /var/www/html/data
- /var/www/html/custom
- /var/www/html/client/custom
- /var/www/html/upload

Restore Instructions:
1. Database: gunzip < ${BACKUP_NAME}_database.sql.gz | mysql -u${DB_USER} -p ${DB_NAME}
2. Files: tar -xzf ${BACKUP_NAME}_files.tar.gz -C /

Generated by: Dokploy EspoCRM Backup Script
EOF
    
    log_info "Manifest created: $manifest_file"
}

cleanup_old_backups() {
    log_info "Cleaning up old backups (retention: ${RETENTION_DAYS} days)..."
    
    # Find and delete old backup files
    local deleted_count=0
    
    while IFS= read -r file; do
        rm -f "$file"
        ((deleted_count++))
        log_info "Deleted old backup: $(basename "$file")"
    done < <(find "$BACKUP_DIR" -name "espocrm_backup_*" -type f -mtime +${RETENTION_DAYS})
    
    if [ $deleted_count -eq 0 ]; then
        log_info "No old backups to delete"
    else
        log_info "Deleted $deleted_count old backup file(s)"
    fi
}

verify_backup() {
    log_info "Verifying backup integrity..."
    
    local db_backup="${BACKUP_DIR}/${BACKUP_NAME}_database.sql.gz"
    local file_backup="${BACKUP_DIR}/${BACKUP_NAME}_files.tar.gz"
    
    # Check database backup
    if [ -f "$db_backup" ]; then
        if gunzip -t "$db_backup" 2>/dev/null; then
            log_info "Database backup verified successfully"
        else
            log_error "Database backup is corrupted"
            return 1
        fi
    else
        log_error "Database backup file not found"
        return 1
    fi
    
    # Check file backup
    if [ -f "$file_backup" ]; then
        if tar -tzf "$file_backup" > /dev/null 2>&1; then
            log_info "File backup verified successfully"
        else
            log_error "File backup is corrupted"
            return 1
        fi
    else
        log_warning "File backup not found (might be expected if no files to backup)"
    fi
    
    return 0
}

send_notification() {
    local status=$1
    local message=$2
    
    # Telegram notification if configured
    if [ -n "$TELEGRAM_BOT_TOKEN" ] && [ -n "$TELEGRAM_CHAT_ID" ]; then
        local telegram_message="🔔 *EspoCRM Backup ${status}*\n\n${message}\n\nTimestamp: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
        
        curl -s -X POST \
            "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
            -d "chat_id=${TELEGRAM_CHAT_ID}" \
            -d "text=${telegram_message}" \
            -d "parse_mode=Markdown" > /dev/null 2>&1
    fi
}

# Main execution
main() {
    log_info "===== EspoCRM Backup Script Started ====="
    log_info "Backup directory: $BACKUP_DIR"
    log_info "Retention days: $RETENTION_DAYS"
    
    # Check requirements
    check_requirements
    
    # Initialize status
    local backup_status="SUCCESS"
    local status_message=""
    
    # Perform database backup
    if backup_database; then
        status_message="${status_message}✅ Database backup completed\n"
    else
        backup_status="FAILED"
        status_message="${status_message}❌ Database backup failed\n"
    fi
    
    # Perform file backup
    if backup_files; then
        status_message="${status_message}✅ File backup completed\n"
    else
        backup_status="PARTIAL"
        status_message="${status_message}⚠️ File backup failed\n"
    fi
    
    # Create manifest
    create_backup_manifest
    
    # Verify backups
    if verify_backup; then
        status_message="${status_message}✅ Backup verification passed\n"
    else
        backup_status="FAILED"
        status_message="${status_message}❌ Backup verification failed\n"
    fi
    
    # Cleanup old backups
    cleanup_old_backups
    
    # Calculate total backup size
    local total_size=$(du -sh "${BACKUP_DIR}/${BACKUP_NAME}_"* 2>/dev/null | awk '{sum+=$1} END {print sum}')
    status_message="${status_message}\n📊 Total backup size: ~${total_size}MB"
    
    # Send notification
    send_notification "$backup_status" "$status_message"
    
    # Final status
    if [ "$backup_status" == "SUCCESS" ]; then
        log_info "===== Backup completed successfully ====="
        exit 0
    elif [ "$backup_status" == "PARTIAL" ]; then
        log_warning "===== Backup completed with warnings ====="
        exit 0
    else
        log_error "===== Backup failed ====="
        exit 1
    fi
}

# Run main function
main "$@"